Assume the first printed: 0x7fffeb578710
(a) 0x7fffeb578710 - using & basically it printed the address of x, the difference from the first one is the array decay into a pointer
(b) 0x7fffeb578714 - it actually adds sizeof(int)to x, which in this case is 4
(c) 0x7fffeb578720 - it printed the address of x, but add the sizeof(int) to it, which is 4, but each int is 4 bytes, so it add 16 (as a decimal), convert it into hex, so it added 10.
(d) 23 - it printed the value of the first array
(e) 28 - it add the value of the first array (which is 23) with the value of x[2] (which is 5), so it add both and became 28
(f) 151 - it add the value of the first array (which is 23) with the value of the third array (which is 1), but the 1 is shifted left by 7, so it became 10000000 (which is 128), so it added both and become 151

